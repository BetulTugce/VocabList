@inherits LayoutComponentBase
@inject NavigationManager navigationManager

<PageTitle>VocabList</PageTitle>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
    @* <div class="sidebar">
    <NavMenu />
    </div> *@

    <main>
        <nav class="navbar bg-dark border-bottom border-body" data-bs-theme="dark">
            <a class="navbar-brand ms-2" style="color: #f7f7f8;" href="/">VocabList</a>
            <!-- Navbar content -->
            <div class="ml-auto">
                <div class="mr-2">
                    <CascadingValue Value="username" Name="AvatarChar">
                        <AuthenticationAvatar></AuthenticationAvatar>
                    </CascadingValue>
                </div>
            </div>
        </nav>
        @* <div class="top-row px-4">
        <CascadingValue Value="username" Name="AvatarChar">
        <AuthenticationAvatar></AuthenticationAvatar>
        </CascadingValue>
        </div> *@

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Inject]
    ILocalStorageService localStorageService { get; set; }

    string username = String.Empty;
    // string accessToken = String.Empty;
    // string userId = String.Empty;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        if (!IsAllowAnonymous())
        {
            if (authState.User.Identity.IsAuthenticated)
            {
                username = await localStorageService.GetItemAsStringAsync("Username");
                // await InvokeAsync(StateHasChanged);
                if (String.IsNullOrEmpty(username))
                {
                    await ClearLocalStorageAndNavigateToLogin();
                }
                // await InvokeAsync(StateHasChanged);
            }
            else
            {
                await ClearLocalStorageAndNavigateToLogin();
            }
        }
        else
        {
            // accessToken = await localStorageService.GetItemAsStringAsync("AccessToken");
            username = await localStorageService.GetItemAsStringAsync("Username");
            // userId = await localStorageService.GetItemAsStringAsync("id");
        }

    }



    private bool IsAllowAnonymous()
    {
        // Kontrol edilecek URL parçacıkları..
        string[] allowedUrlFragments = { "/register", "/kvkk", "/forgot-password", "/update-password" };

        // Mevcut URL alınıyor..
        string currentUrl = navigationManager.Uri;
        // if (currentUrl.Contains("/register") || currentUrl.Contains("/kvkk") || currentUrl.Contains("/forgot-password") || currentUrl.Contains("/update-password"))
        // {
        //     return true;
        // }

        // Herhangi bir URL parçacığı ile başlıyorsa true..
        foreach (var urlFragment in allowedUrlFragments)
        {
            if (currentUrl.Contains(urlFragment))
            {
                return true;
            }
        }

        return false;
    }

    private async Task ClearLocalStorageAndNavigateToLogin()
    {
        await localStorageService.RemoveItemAsync("AccessToken");
        await localStorageService.ClearAsync();
        navigationManager.NavigateTo($"/login");
    }
}