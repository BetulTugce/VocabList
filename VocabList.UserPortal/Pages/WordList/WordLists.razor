@page "/word-lists/{Id:int}"

@using System.Collections.Immutable
@using VocabList.UserPortal.Data
@using VocabList.UserPortal.Data.WordLists
@using VocabList.UserPortal.Data.Words
@using VocabList.UserPortal.Data.Sentences
@using VocabList.UserPortal.Services
@inject WordListApiService _wordListApiService
@inject WordApiService _wordApiService
@inject SentenceApiService _sentenceApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

<style>
    .page-item {
        cursor: pointer;
    }

    .mud-select {
        max-width: max-content;
        margin-right: 20px;
    }
</style>

@if (isUnauthorized)
{
    <UnauthorizedTransactions></UnauthorizedTransactions>
}
else if (wordList == null)
{
    <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" NoIcon="true" Class="mb-2 mt-3">Böyle bir liste bulunmamaktadır.</MudAlert>
}
else
{
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateWordDialog" Color="Color.Info">Kelime Ekle</MudButton>
    <br />
    <MudToolBar>
        <MudText Typo="Typo.h6">@wordList.Name</MudText>
            <MudSpacer />

            <MudSelect Dense="true" T="string" Label="Sırala" Variant="Variant.Text" SelectedValuesChanged="HandleValueChanged" @bind-Value="@orderString">
                <MudSelectItem Value="@("UpdatedDate ASC")">Değiştirme Tarihi (Eskiden yeniye)</MudSelectItem>
                <MudSelectItem Value="@("UpdatedDate DESC")">Değiştirme Tarihi (Yeniden eskiye)</MudSelectItem>
                <MudSelectItem Value="@("CreatedDate ASC")">Oluşturma Tarihi (Eskiden yeniye)</MudSelectItem>
                <MudSelectItem Value="@("CreatedDate DESC")">Oluşturma Tarihi (Yeniden eskiye)</MudSelectItem>
                <MudSelectItem Value="@("Value ASC")">Kelime (A-Z)</MudSelectItem>
                <MudSelectItem Value="@("Value DESC")">Kelime (Z-A)</MudSelectItem>
                <MudSelectItem Value="@("Type ASC")">Kelime Türü (A-Z)</MudSelectItem>
                <MudSelectItem Value="@("Type DESC")">Kelime Türü (Z-A)</MudSelectItem>
                <MudSelectItem Value="@("Description ASC")">Açıklama (A-Z)</MudSelectItem>
                <MudSelectItem Value="@("Description DESC")">Açıklama (Z-A)</MudSelectItem>
            </MudSelect>

            @* <MudSpacer /> *@

            <MudTextField @bind-Value="filterRequest.SearchString" Label=" " Placeholder="Arama yap" HelperText="Arama sonuçlarını görmek için enter'a basın.." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" @onkeyup="HandleKeyUp"></MudTextField>

    </MudToolBar>
    <MudTable Items="@Words" Hover="true" Breakpoint="Breakpoint.Sm">

        <ColGroup>
            <col style="width:300px;" />
            <col style="width:100px;" />
            <col />
            <col style="width:100px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>Kelime</MudTh>
            <MudTh>Anlamı</MudTh>
            <MudTh>Türü</MudTh>
            <MudTh>Oluşturulma Tarihi</MudTh>
            <MudTh>Değiştirilme Tarihi</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context))">Cümle</MudButton></MudTd>
            @* <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))">@((context.ShowDetails == true) ? "Gizle" : "Göster") Cümle</MudButton></MudTd> *@
            <MudTd DataLabel="Kelime">@context.Value</MudTd>
                <MudTd DataLabel="Anlamı">@context.Description</MudTd>
                <MudTd DataLabel="Türü">@context.Type</MudTd>
                <MudTd DataLabel="Oluşturulma Tarihi">@context.CreatedDate</MudTd>
                <MudTd DataLabel="Değiştirilme Tarihi">@(context.UpdatedDate is not null ? context.UpdatedDate.Value.ToShortDateString() : "-")</MudTd>
                <MudTd Style="text-align: right">
                    <MudIconButton OnClick="@(() => OpenCreateSentenceDialog(context))" Icon="@Icons.Material.Outlined.Add" Size="@Size.Small" />
                    <MudIconButton OnClick="@(() => GetWordInfo(context))" Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" />
                    <MudIconButton OnClick="@(() => DeleteWord(context))" Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowDetails)
            {
                @* Cümleler basılacak *@
                <MudTr>
                    <td colspan="4">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="(() => OpenCreateSentenceDialog(context))" Color="Color.Info">Cümle Ekle</MudButton>
                                    <MudText Typo="Typo.body1"><strong>@context.Value</strong> @(Sentences.Any() ? " için kayıtlı cümleler :" : " için henüz cümle eklenmemiş.")</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            @if (Sentences.Any())
                            {
                                <MudCardContent Class="pa-0">
                                    <MudTable Items="@Sentences" Context="sentenceContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                        <ColGroup>
                                            <col />
                                            <col />
                                            <col style="width:200px;" />
                                        </ColGroup>
                                        <HeaderContent>
                                            <MudTh>Cümle</MudTh>
                                            <MudTh>Oluşturulma Tarihi</MudTh>
                                            <MudTh>Değiştirilme Tarihi</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Cümle">@sentenceContext.Value</MudTd>
                                        <MudTd DataLabel="Oluşturulma Tarihi">@sentenceContext.CreatedDate</MudTd>
                                        <MudTd DataLabel="Değiştirilme Tarihi">@(sentenceContext.UpdatedDate is not null ? sentenceContext.UpdatedDate.Value.ToShortDateString() : "-")</MudTd>
                                        <MudTd Style="text-align: right">
                                            <MudIconButton OnClick="@(() => GetSentenceInfo(sentenceContext))" Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" />
                                            <MudIconButton OnClick="@(() => DeleteSentence(sentenceContext))" Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                            }
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            @* <MudPagination ShowFirstButton="true" ShowLastButton="true" ShowNextButton="true" ShowPreviousButton="true" BoundaryCount="2" MiddleCount="3" SelectedChanged="WordsPageChanged" Count="@pageCount" Class="pa-4" /> *@
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-end">
                    <li class="page-item @GetPreviousButtonClass(_selectedPage)">
                        <a class="page-link" @onclick=@(() => WordsPageChanged(1)) tabindex="-1">İlk</a>
                    </li>
                    <li class="page-item @GetPreviousButtonClass(_selectedPage)">
                        <a class="page-link" @onclick=@(() => WordsPageChanged(_selectedPage - 1)) tabindex="-1">Önceki</a>
                    </li>
                    @foreach (var pageNumber in GetDisplayedPageNumbers())
                    {
                        if (pageNumber.Equals(_selectedPage))
                        {
                            <li class="page-item active"><a class="page-link" @onclick=@(() => @WordsPageChanged(pageNumber))>@pageNumber</a></li>
                        }
                        else
                        {
                            <li class="page-item"><a class="page-link" @onclick=@(() => @WordsPageChanged(pageNumber))>@pageNumber</a></li>
                        }
                    }
                    <li class="page-item @GetNextButtonClass(_selectedPage)">
                        <a class="page-link" @onclick=@(() => WordsPageChanged(_selectedPage + 1))>Sonraki</a>
                    </li>
                    <li class="page-item @GetNextButtonClass(_selectedPage)">
                        <a class="page-link" @onclick=@(() => WordsPageChanged(pageCount))>Son</a>
                    </li>

                </ul>
            </nav>
        </PagerContent>
    </MudTable>
}

@if (Words is null)
{
    <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" NoIcon="true" Class="mb-2 mt-3">Kelime bulunamadı.</MudAlert>
}

<MudDialog @bind-IsVisible="createWordDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Yeni Kelime Ekle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="createWordRequest.Value" Label="Kelime" HelperText="Lütfen eklemek istediğiniz kelimeyi girin.." Variant="Variant.Outlined" />
        <MudTextField @bind-Value="createWordRequest.Description" Label="Anlamı" HelperText="Lütfen kelimenin anlamını girin.." Variant="Variant.Outlined" />
        <MudSelect Dense="true" T="string" Label="Kelime Türü" HelperText="Lütfen kelimenin türünü seçin.." Variant="Variant.Text" @bind-Value="@createWordRequest.Type">
            @foreach (var type in TypesOfWords)
            {
                <MudSelectItem Value="@(type)" />
            }
        </MudSelect>
        @* <MudTextField @bind-Value="createWordRequest.Type" Label="Türü" HelperText="Lütfen kelimenin türünü girin.." Variant="Variant.Outlined" /> *@
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="CreateWord" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseCreateWordDialog" Class="px-10">İptal</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="updateWordDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> @* @updateWordRequest.Value *@ Kelime Düzenle
        </MudText>
    </TitleContent>
    <DialogContent>
        @* Buraya oluşturulma ve güncellenme tarihleri de eklenecek.. *@
        <MudTextField @bind-Value="@updateWordRequest.Value" Label="Kelime" HelperText="Lütfen kelime için bir isim belirleyin.." Variant="Variant.Outlined" />
        <MudTextField @bind-Value="updateWordRequest.Description" Label="Anlamı" HelperText="Lütfen kelimenin anlamını girin.." Variant="Variant.Outlined" />
        <MudSelect Dense="true" T="string" Label="Kelime Türü" HelperText="Lütfen kelimenin türünü seçin.." Variant="Variant.Text" @bind-Value="@updateWordRequest.Type">
            @foreach (var type in TypesOfWords)
            {
                <MudSelectItem Value="@(type)" />
            }
        </MudSelect>
        @* <MudTextField @bind-Value="updateWordRequest.Type" Label="Türü" HelperText="Lütfen kelimenin türünü girin.." Variant="Variant.Outlined" /> *@
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="UpdateWord" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseUpdateWordDialog" Class="px-10">Kapat</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="createSentenceDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Yeni Cümle Ekle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@createSentenceRequest.Value" Label="Cümle" HelperText="Lütfen cümle girin.." Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="CreateSentence" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseCreateSentenceDialog" Class="px-10">Kapat</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="updateSentenceDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> @* @updateSentenceRequest.Value *@ Cümle Düzenle
        </MudText>
    </TitleContent>
    <DialogContent>
        @* Buraya oluşturulma ve güncellenme tarihleri de eklenecek.. *@
        <MudTextField @bind-Value="@updateSentenceRequest.Value" Label="Cümle" HelperText="Lütfen cümle girin.." Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="UpdateSentence" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseUpdateSentenceDialog" Class="px-10">Kapat</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public int Id { get; set; }

    String accessToken = string.Empty;
    String userId = string.Empty;
    String username = string.Empty;
    bool isUnauthorized = false;

    int pageCount; // Toplam sayfa sayısı
    int _selectedPage = 1; // Seçili olan sayfanın numarası
    /* const */
    int rowsPerPage = 10; // Sayfa başına gösterilecek kelime sayısı
    int TotalWordCountOfTheWordList;

    string orderString;

    // Sıralama (Sort-OrderBy) seçeneklerini tutar..
    public static readonly string[] sortOptions = { "CreatedDate ASC", "CreatedDate DESC", "UpdatedDate ASC", "UpdatedDate DESC", "Value ASC", "Value DESC", "Type ASC", "Type DESC", "Description ASC", "Description DESC" };

    // Kelime türlerini tutar..
    public static readonly string[] TypesOfWords = { "noun", "verb", "adjective", "adverb", "phrasal verb", "preposition", "collocation", "conjunction", "transition", "prepositional phrase" };
    // ImmutableList<string> TypesOfWords = ImmutableList.Create("noun", "verb", "adjective", "adverb", "phrasal verb", "preposition", "collocation", "conjunction", "transition", "prepositional phrase");

    WordList wordList = new WordList();
    List<Word> Words = new List<Word>();
    List<Sentence> Sentences = new List<Sentence>();

    WordFilterRequest filterRequest = new WordFilterRequest();

    CreateWordRequest createWordRequest = new CreateWordRequest();
    Word updateWordRequest = new Word();

    CreateSentenceRequest createSentenceRequest = new CreateSentenceRequest();
    Sentence updateSentenceRequest = new Sentence();

    private DialogOptions dialogOptions = new() { FullWidth = true };
    private bool createWordDialogIsVisible; // Dialog penceresinin görünürlük durumu..
    private void OpenCreateWordDialog() => createWordDialogIsVisible = true; // Dialog penceresini görünür hale getirir..
    void CloseCreateWordDialog() => createWordDialogIsVisible = false; // Dialog penceresini kapatır..

    private bool updateWordDialogIsVisible;
    private void OpenUpdateWordDialog() => updateWordDialogIsVisible = true;
    void CloseUpdateWordDialog() => updateWordDialogIsVisible = false;

    private bool createSentenceDialogIsVisible;
    // private void OpenCreateSentenceDialog() => createSentenceDialogIsVisible = true;
    private void OpenCreateSentenceDialog(Word word)
    {
        selectedWord = word;
        createSentenceDialogIsVisible = true;
    }
    void CloseCreateSentenceDialog() => createSentenceDialogIsVisible = false;

    private bool updateSentenceDialogIsVisible;
    private void OpenUpdateSentenceDialog() => updateSentenceDialogIsVisible = true;
    void CloseUpdateSentenceDialog() => updateSentenceDialogIsVisible = false;

    // Login sayfasına yönlendiriyor..
    void GoToLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    #region Paginition İşlemleri
    // Paginitiondaki önceki ve sonraki sayfa butonlarının tıklanabilir olma özelliğini ayarlamak için..
    // _selectedPage 1'e veya pageCounta eşitse classa disabled basılacak..
    private string GetPreviousButtonClass(int selectedNumber) => selectedNumber == 1 ? "disabled" : "";
    private string GetNextButtonClass(int selectedNumber) => selectedNumber == pageCount ? "disabled" : "";

    // Sayfa numaralarını yazdırmak için..
    private List<int> GetDisplayedPageNumbers()
    {
        List<int> displayedPages = new List<int>();

        if (pageCount <= 3)
        {
            // Sayfa sayısı 3 ve daha az ise tüm sayfaları listeye ekler..
            displayedPages.AddRange(Enumerable.Range(1, pageCount));
        }
        else
        {
            // Seçili olan sayfa 1. sayfa değilse seçili sayfanın bir eksiği ve seçili sayfayı listeye ekler..
            if (_selectedPage > 1) displayedPages.Add(_selectedPage - 1);
            displayedPages.Add(_selectedPage);
            if (_selectedPage < pageCount) displayedPages.Add(_selectedPage + 1); // Seçili olan sayfa toplam sayfa sayısından küçükse seçili sayfanın 1 fazlasını listeye ekler..
        }

        return displayedPages;
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        // AccessToken, username ve userId bilgisi localstorageden alınıyor.. Eğer null ise Login sayfasına yönlendiriliyor..
        accessToken = await localStorageService.GetItemAsStringAsync("AccessToken");
        username = await localStorageService.GetItemAsStringAsync("Username");
        userId = await localStorageService.GetItemAsStringAsync("id");

        if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(username))
        {
            GoToLoginPage(); // Login sayfasına yönlendirir..
        }
        else
        {
            accessToken = accessToken.Substring(1, (accessToken.Length - 2));
            userId = userId.Substring(1, (userId.Length - 2));

            // URL'den parametreleri okur ve filtreleri günceller
            var uri = new Uri(navigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("SearchString", out var searchString))
            {
                filterRequest.SearchString = searchString; // Aranılan Kelime (Value, Type, Description kolonlarında)
            }

            if (query.TryGetValue("Sort", out var sort))
            {
                filterRequest.Sort = sort; // Sıralama Seçeneği (Value, Description, Type, UpdatedDate, CreatedDate)
            }

            if (query.TryGetValue("OrderBy", out var orderBy))
            {
                filterRequest.OrderBy = orderBy; // Sıralama biçimi (ASC - DESC)
            }

            orderString = filterRequest.Sort + " " + filterRequest.OrderBy; // dropdown seçili hale getiriliyor..
            bool isOrderValid = sortOptions.Contains(orderString);

            if (!isOrderValid)
            { // Kullanıcı urlden sort ve orderby değerlerine anlamsız bir şey girdiğinde varsayılan değerlere göre sıralama yapacak..
                filterRequest.Sort = "UpdatedDate";
                filterRequest.OrderBy = "DESC";
                orderString = filterRequest.Sort + " " + filterRequest.OrderBy;
            }

            if (query.TryGetValue("Page", out var pageNumberString) && int.TryParse(pageNumberString, out var pageNumberValue))
            {
                _selectedPage = pageNumberValue; // Seçili sayfa
            }

            if (query.TryGetValue("Size", out var sizeNumberString) && int.TryParse(sizeNumberString, out var sizeNumberValue))
            {
                rowsPerPage = sizeNumberValue; // Seçili sayfa boyutu
            }

            // İlgili idye sahip kelime listesi userIdyi de kontrol ederek çekiliyor..
            //Burada appuseridnin kontrol edilme sebebi, kullanıcının id kısmına rastgele bir sayı girip başkasının listesini çekmesini önlemek..
            await GetSelectedWordList();

            // UserId bilgisi de kontrol edilerek page ve sizea göre ilgili idye sahip listesinin altındaki kelimeler çekiliyor.. (İlk sayfa - 10 adet kelime)
            // await GetAllWordsBySelectedWordList(0, rowsPerPage);
            await GetFilteredWordsAsync((_selectedPage - 1), rowsPerPage);

            // Kelime listesine ait toplam kelime sayısı çekiliyor..
            // await GetTotalCountByWordListId();
        }

    }

    // İlgili idye sahip kelime listesi userIdyi de kontrol ederek çekiliyor..
    async Task GetSelectedWordList()
    {
        var response = await _wordListApiService.GetWordListByIdAndUserIdAsync(new() { Id = Id, AppUserId = userId }, accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            wordList = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
        {
            // Seçili liste yoksa..
            wordList = null;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            isUnauthorized = true;
            // ShowNotification("Kelime listelerini görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Kelime listelerinizi çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    #region Filtreleme Öncesi Listeleme Kodları..
    // UserId bilgisi de kontrol edilerek page ve sizea göre ilgili idye sahip listesinin altındaki kelimeler çekiliyor..
    // async Task GetAllWordsBySelectedWordList(int page, int size)
    // {
    //     var response = await _wordApiService.GetAllWordsByUserIdAndWordListIdAsync(new() { Page = page, Size = size, AppUserId = userId, WordListId = Id }, accessToken);
    //     if (response.Item2 == System.Net.HttpStatusCode.OK)
    //     {
    //         // İşlem başarılıysa..
    //         Words = response.Item1;
    //     }
    //     else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
    //     {
    //         // Seçili listede eleman yoksa..
    //         Words = null;
    //     }
    //     else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
    //     {
    //         // Yetkisiz kişiyse..
    //         // isUnauthorized = true;
    //         ShowNotification("Kelime listelerini görme yetkiniz bulunmamaktadır.", Severity.Warning);
    //     }
    //     else
    //     {
    //         // Diğer hata durumları..
    //         ShowNotification("Kelime listelerinizi çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
    //     }
    // }

    // // Kelime listesine ait toplam kelime sayısı bilgisi çekiliyor..
    // async Task GetTotalCountByWordListId()
    // {
    //     var response = await _wordApiService.GetTotalCountByWordListId(new() { WordListId = Id }, accessToken);
    //     if (response.Item2 == System.Net.HttpStatusCode.OK)
    //     {
    //         // İşlem başarılıysa..

    //         // Kelime listesinin toplam kelime sayısı alınıyor..
    //         TotalWordCountOfTheWordList = response.Item1;

    //         // Sayfa sayısı hesaplanıyor..
    //         if (TotalWordCountOfTheWordList % rowsPerPage == 0)
    //         {
    //             // Toplam kelime sayısı sayfa başına gösterilecek kelime sayısına tam bölünüyorsa sayfa sayısı bölme işleminin sonucu kadardır..
    //             pageCount = TotalWordCountOfTheWordList / rowsPerPage;
    //         }
    //         else
    //         {
    //             // Toplam kelime sayısının sayfa başına gösterilecek kelime sayısına bölümü kalanlıysa sayfa sayısı 1 fazla olacak..
    //             pageCount = (TotalWordCountOfTheWordList / rowsPerPage) + 1;
    //         }
    //     }
    //     else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
    //     {
    //         // Yetkisiz kullanıcı..
    //         ShowNotification("Kelime listesinin toplam kelime sayısını görme yetkiniz bulunmamaktadır.", Severity.Warning);
    //     }
    //     else
    //     {
    //         // Diğer hata durumları..
    //         ShowNotification("İşlem sırasında beklenmeyen bir hata meydana geldi.", Severity.Error);
    //     }
    // }
    #endregion

    // Kelimelerin listelendiği tabloda sayfa değiştirildiğinde çalışır..
    private async Task WordsPageChanged(int selectedPage)
    {
        _selectedPage = selectedPage;
        // Seçili olan sayfa 1 ise aslında 0.sayfayı getirmesi gerekiyor, bu yüzden 1 eksiği parametre olarak veriliyor..
        // await GetAllWordsBySelectedWordList((selectedPage - 1), rowsPerPage);
        // await GetFilteredWordsAsync((_selectedPage - 1), rowsPerPage);
        UpdateUrl(_selectedPage);
    }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }

    // Yeni kelime oluşturur..
    async Task CreateWord()
    {
        // Kelime listesinin idsi alınıyor..
        createWordRequest.WordListId = Id;
        // Actiona istekte bulunuyor..
        var response = await _wordApiService.CreateWordAsync(createWordRequest, accessToken);
        if (response == System.Net.HttpStatusCode.Created)
        {
            // İşlem başarılıysa..

            // Toplam kelime sayısı çekiliyor..
            // await GetTotalCountByWordListId();

            // Güncel listeyi çeker.. (Kelimeleri getiriyor..)
            // await GetAllWordsBySelectedWordList(_selectedPage - 1, rowsPerPage);
            await GetFilteredWordsAsync(_selectedPage - 1, rowsPerPage);

            CloseCreateWordDialog(); // Dialog penceresini kapatır..

            ShowNotification("Kelime eklendi.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişi..
            // isUnauthorized = true;
            ShowNotification("Kelime ekleme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
        createWordRequest = new();
    }

    Word selectedWord = new Word();

    // Cümle Göster/Gizle butonuna tıklandığında çalışır.. Parametredeki kelime idsi ile ilişkili cümleleri çekerek gösterir..
    private async Task ShowBtnPress(Word word)
    {
        if (selectedWord != word)
        {
            selectedWord.ShowDetails = false;
        }
        // Words.ForEach(word => word.ShowDetails = false);
        selectedWord = word;

        // Parametredeki kelime idsi ile ilişkili cümleleri çeker..
        await GetSentencesByWordIdAsync(word.Id);

        selectedWord.ShowDetails = !selectedWord.ShowDetails;
    }

    // Parametredeki kelime idsi ile ilişkili cümleleri çeker..
    async Task GetSentencesByWordIdAsync(int WordId)
    {
        var response = await _sentenceApiService.GetSentencesByWordIdAsync(WordId, accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..
            Sentences = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
        {
            // Seçili kelimeye ait hiç cümle yoksa..
            Sentences = null;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Cümleleri görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Kelimeye ait cümleleri çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // Kelime silme işlemi..
    async Task DeleteWord(Word request)
    {
        var response = await _wordApiService.DeleteWordAsync(request.Id, accessToken);
        if (response == System.Net.HttpStatusCode.NoContent)
        {
            // Toplam kelime sayısı çekiliyor..
            // await GetTotalCountByWordListId();
            TotalWordsCountOfTheUser -= 1; // Toplam liste sayısı 1 azalıyor..

            await CalculateTotalPageCount(TotalWordsCountOfTheUser, rowsPerPage);

            // Bir kelime silindiğinde toplam kelime sayısı 1 azalacak, sayfa sayısı da 1 azalmış olabilir.. Eğer son sayfa seçiliyse ve sayfa sayısı 1 azaldıysa seçili olan sayfa da 1 azalmalı..

            if (_selectedPage > pageCount)
            {
                _selectedPage -= 1;
                UpdateUrl(_selectedPage);// Seçili sayfa sayısı da 1 azaldığı için url güncellenir..
            }

            // Kelime listesi güncelleniyor..
            // await GetAllWordsBySelectedWordList(_selectedPage - 1, rowsPerPage);
            await GetFilteredWordsAsync(_selectedPage - 1, rowsPerPage);

            ShowNotification("Kelime başarıyla silinmiştir.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.NotFound)
        {
            // Bu id ile kayıtlı bir kelime bulunmuyorsa..
            ShowNotification($"{request.Value} şeklinde bir kayıt bulunamadı.", Severity.Warning);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Kelime silme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // Kelime tablosunda edit butonuna tıklandığı zaman kelimenin bilgilerini getirecek olan method.. Sonuçları bir dialog penceresi açarak sunar..
    async Task GetWordInfo(Word word)
    {
        // Parametrede gelen kelime modele atanıyor..
        // updateWordRequest = word; // Bu şekilde doğrudan atama yapınca işlem başarısız olsa bile güncellenmiş gibi gösteriyor..
        updateWordRequest = new() { Id = word.Id, CreatedDate = word.CreatedDate, UpdatedDate = word.UpdatedDate, WordListId = word.WordListId, Description = word.Description, Type = word.Type, Value = word.Value, ShowDetails = word.ShowDetails };

        // Dialog penceresini açar..
        OpenUpdateWordDialog();
    }

    // Kelimeyi günceller..
    async Task UpdateWord()
    {
        var response = await _wordApiService.UpdateWordAsync(updateWordRequest, accessToken);
        if (response == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..

            // Güncel listeyi çeker..
            // await GetAllWordsBySelectedWordList(_selectedPage - 1, rowsPerPage);
            await GetFilteredWordsAsync(_selectedPage - 1, rowsPerPage);

            CloseUpdateWordDialog(); // Dialog penceresini kapatır..

            ShowNotification("Kelime güncellendi.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.NotFound)
        {
            // İlgili kelime bulunamadı..
            ShowNotification("İlgili kelime bulunamadı.", Severity.Warning);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Kelime güncelleme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // Yeni cümle oluşturur..
    async Task CreateSentence()
    {
        // Kelimenin idsi alınıyor..
        createSentenceRequest.WordId = selectedWord.Id;
        // Actiona istekte bulunuyor..
        var response = await _sentenceApiService.CreateSentenceAsync(createSentenceRequest, accessToken);
        if (response == System.Net.HttpStatusCode.Created)
        {
            // İşlem başarılıysa..

            // Toplam cümle sayısı çekiliyor..
            // await GetTotalCountByWordListId();

            // Güncel listeyi çeker.. (Cümleleri getiriyor..)
            await GetSentencesByWordIdAsync(selectedWord.Id);

            CloseCreateSentenceDialog(); // Dialog penceresini kapatır..

            ShowNotification("Cümle eklendi.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişi..
            // isUnauthorized = true;
            ShowNotification("Cümle ekleme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
        createSentenceRequest = new();
    }

    // Kelime tablosunda cümle alanındaki edit butonuna tıklandığı zaman cümlenin bilgilerini getirecek olan method.. Sonuçları bir dialog penceresi açarak sunar..
    async Task GetSentenceInfo(Sentence sentence)
    {
        // Parametrede gelen cümle modele atanıyor..
        // updateSentenceRequest = sentence; // Bu şekilde doğrudan atama yapınca işlem başarısız olsa bile güncellenmiş gibi gösteriyor..
        updateSentenceRequest = new() { Id = sentence.Id, Value = sentence.Value, CreatedDate = sentence.CreatedDate, UpdatedDate = sentence.UpdatedDate, WordId = sentence.WordId };

        // Dialog penceresini açar..
        OpenUpdateSentenceDialog();
    }

    // Cümleyi günceller..
    async Task UpdateSentence()
    {
        var response = await _sentenceApiService.UpdateSentenceAsync(updateSentenceRequest, accessToken);
        if (response == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..

            // Güncel listeyi çeker..
            await GetSentencesByWordIdAsync(updateSentenceRequest.WordId);

            CloseUpdateSentenceDialog(); // Dialog penceresini kapatır..

            ShowNotification("Cümle güncellendi.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.NotFound)
        {
            // İlgili cümle bulunamadı..
            ShowNotification("İlgili cümle bulunamadı.", Severity.Warning);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Cümle güncelleme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // Cümle silme işlemi..
    async Task DeleteSentence(Sentence request)
    {
        var response = await _sentenceApiService.DeleteSentenceAsync(request.Id, accessToken);
        if (response == System.Net.HttpStatusCode.NoContent)
        {
            // Kelime sayısı çekiliyor..
            // await GetTotalCountByUserId();

            // Bir kelime silindiğinde toplam kelime sayısı 1 azalacak, sayfa sayısı da 1 azalmış olabilir.. Eğer son sayfa seçiliyse ve sayfa sayısı 1 azaldıysa seçili olan sayfa da 1 azalmalı..

            // if (_selectedPage > pageCount)
            // {
            //     _selectedPage -= 1;
            // }

            // Cümle listesi güncelleniyor..
            // await GetAllWordsBySelectedWordList(_selectedPage - 1, rowsPerPage);
            await GetSentencesByWordIdAsync(selectedWord.Id); // Parametredeki kelime idsi ile ilişkili cümleleri çeker..

            ShowNotification("Cümle başarıyla silinmiştir.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.NotFound)
        {
            // Bu id ile kayıtlı bir kelime bulunmuyorsa..
            ShowNotification($"{request.Value} şeklinde kayıtlı bir cümle bulunamadı.", Severity.Warning);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Cümle silme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs args)
    {
        // Enter tuşuna basıldığında çalışır..
        if (args.Key == "Enter")
        {
            // Filtreleme yapılacağı için seçili sayfa 1 olarak güncelleniyor..
            _selectedPage = 1;

            // await GetFilteredWordsAsync(_selectedPage - 1, rowsPerPage);

            // Url güncellenir..
            UpdateUrl(_selectedPage);
        }
    }

    // Sıralama dropdownında seçim yapılınca tetiklenir..
    private async Task HandleValueChanged()
    {
        // Filtreleme yapılacağı için seçili sayfa 1 olarak güncelleniyor..
        _selectedPage = 1;

        // await GetFilteredWordsAsync(_selectedPage - 1, rowsPerPage);

        string[] orderWords = orderString.Split(' ');

        filterRequest.Sort = orderWords[0];
        filterRequest.OrderBy = orderWords[1];

        // Url güncellenir
        UpdateUrl(_selectedPage);
    }

    // Filtreleri ve sıralama durumunu kullanarak URL güncellenir..
    void UpdateUrl(int page)
    {
        var uriBuilder = new UriBuilder(navigationManager.Uri);
        filterRequest.Page = page;
        filterRequest.Size = rowsPerPage;
        // Searchboxa değer girilmişse..
        if (!string.IsNullOrEmpty(filterRequest.SearchString))
        {
            uriBuilder.Query = $"SearchString={Uri.EscapeDataString(filterRequest.SearchString)}&Sort={filterRequest.Sort}&OrderBy={filterRequest.OrderBy}&Page={filterRequest.Page}&Size={filterRequest.Size}";
        }
        else
        {
            uriBuilder.Query = $"Sort={filterRequest.Sort}&OrderBy={filterRequest.OrderBy}&Page={filterRequest.Page}&Size={filterRequest.Size}";
        }


        // Sayfayı günceller..
        navigationManager.NavigateTo(uriBuilder.Uri.ToString(), true);
        // navigationManager.NavigateTo(uriBuilder.Uri.ToString());
    }

    // Toplam sayfa sayısı hesaplanıyor..
    async Task CalculateTotalPageCount(int _totalWordCount, int _rowsPerPage)
    {
        // Sayfa sayısı hesaplanıyor..
        if (_totalWordCount % _rowsPerPage == 0)
        {
            // Toplam kelime sayısı sayfa başına gösterilecek kelime sayısına tam bölünüyorsa sayfa sayısı bölme işleminin sonucu kadardır..
            pageCount = _totalWordCount / _rowsPerPage;
        }
        else
        {
            // Toplam kelime sayısının sayfa başına gösterilecek kelime sayısına bölümü kalanlıysa sayfa sayısı 1 fazla olacak..
            pageCount = (_totalWordCount / _rowsPerPage) + 1;
        }
    }

    int TotalWordsCountOfTheUser;

    private async Task GetFilteredWordsAsync(int page, int size)
    {
        // filterRequest.Page = (_selectedPage - 1);
        filterRequest.Page = page;
        filterRequest.Size = size;
        filterRequest.AppUserId = userId;
        filterRequest.WordListId = wordList.Id;
        var response = await _wordApiService.GetFilteredWordsAsync(filterRequest, accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılı..

            // Liste güncelleniyor..
            Words = response.Item1.Words;

            // Kullanıcının toplam kelime sayısı alınıyor.. (filtreye uyan)
            TotalWordsCountOfTheUser = response.Item1.TotalCount;

            // Sayfa sayısı hesaplanıyor..
            await CalculateTotalPageCount(TotalWordsCountOfTheUser, rowsPerPage);
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kullanıcı..
            isUnauthorized = true;
            ShowNotification("Kelimeleri görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
        {
            // Bu üyenin kayıtlı bir kelimesi bulunmuyorsa..
            Words = null;
            TotalWordsCountOfTheUser = 0;
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Kelimeleri çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }
}
