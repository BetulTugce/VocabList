@page "/word-lists/{Id:int}"

@using VocabList.UserPortal.Data
@using VocabList.UserPortal.Data.WordLists
@using VocabList.UserPortal.Data.Words
@using VocabList.UserPortal.Data.Sentences
@using VocabList.UserPortal.Services
@inject WordListApiService _wordListApiService
@inject WordApiService _wordApiService
@inject SentenceApiService _sentenceApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

@if (isUnauthorized)
{
    <UnauthorizedTransactions></UnauthorizedTransactions>
}
else if (wordList == null)
{
    @*TODO: Böyle bir liste bulunmamaktadır uyarısı eklenecek*@
    <p>Liste yokki :D</p>
}
else
{
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateWordDialog" Color="Color.Info">Kelime Ekle</MudButton>
    <br />
    @if (Words is not null)
    {
        <MudTable Items="@Words" Hover="true" Breakpoint="Breakpoint.Sm">
            <ColGroup>
                <col style="width:300px;" />
                <col style="width:100px;" />
                <col />
                <col style="width:100px;" />
            </ColGroup>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Kelime</MudTh>
                <MudTh>Anlamı</MudTh>
                <MudTh>Türü</MudTh>
                <MudTh>Oluşturulma Tarihi</MudTh>
                <MudTh>Değiştirilme Tarihi</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context))">Cümle</MudButton></MudTd>
                @* <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))">@((context.ShowDetails == true) ? "Gizle" : "Göster") Cümle</MudButton></MudTd> *@
                <MudTd DataLabel="Kelime">@context.Value</MudTd>
                    <MudTd DataLabel="Anlamı">@context.Description</MudTd>
                    <MudTd DataLabel="Türü">@context.Type</MudTd>
                    <MudTd DataLabel="Oluşturulma Tarihi">@context.CreatedDate</MudTd>
                    <MudTd DataLabel="Değiştirilme Tarihi">@(context.UpdatedDate is not null ? context.UpdatedDate.Value.ToShortDateString() : "-")</MudTd>
                </RowTemplate>
                <ChildRowContent>
                    @if (context.ShowDetails)
                {
                    @* Cümleler basılacak *@
                    <MudTr>
                        <td colspan="4">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1"><strong>@context.Value</strong> @(Sentences.Any() ? " için kayıtlı cümleler :" : " için henüz cümle eklenmemiş.")</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                @if (Sentences.Any())
                                {
                                    <MudCardContent Class="pa-0">
                                        <MudTable Items="@Sentences" Context="sentenceContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                            <ColGroup>
                                                <col />
                                                <col />
                                                <col style="width:200px;" />
                                            </ColGroup>
                                            <HeaderContent>
                                                <MudTh>Cümle</MudTh>
                                                <MudTh>Oluşturulma Tarihi</MudTh>
                                                <MudTh>Değiştirilme Tarihi</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Cümle">@sentenceContext.Value</MudTd>
                                            <MudTd DataLabel="Oluşturulma Tarihi">@sentenceContext.CreatedDate</MudTd>
                                            <MudTd DataLabel="Değiştirilme Tarihi">@(sentenceContext.UpdatedDate is not null ? sentenceContext.UpdatedDate.Value.ToShortDateString() : "-")</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </MudCardContent>
                                }
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
        </MudTable>
    }
}

<MudDialog @bind-IsVisible="createWordDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Yeni Liste Ekle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="createWordRequest.Value" Label="Kelime" HelperText="Lütfen eklemek istediğiniz kelimeyi girin.." Variant="Variant.Outlined" />
        <MudTextField @bind-Value="createWordRequest.Description" Label="Anlamı" HelperText="Lütfen kelimenin anlamını girin.." Variant="Variant.Outlined" />
        <MudTextField @bind-Value="createWordRequest.Type" Label="Türü" HelperText="Lütfen kelimenin türünü girin.." Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="CreateWord" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseCreateWordDialog" Class="px-10">İptal</MudButton>
    </DialogActions>
</MudDialog>

@code {
    // TODO : Table için paginition eklenecek..
    [Parameter]
    public int Id { get; set; }

    String accessToken = string.Empty;
    String userId = string.Empty;
    String username = string.Empty;
    bool isUnauthorized = false;

    int _selectedPage = 1; // Seçili olan sayfanın numarası
    const int rowsPerPage = 10; // Sayfa başına gösterilecek kelime sayısı

    WordList wordList = new WordList();
    List<Word> Words = new List<Word>();
    List<Sentence> Sentences = new List<Sentence>();

    CreateWordRequest createWordRequest = new CreateWordRequest();

    private DialogOptions dialogOptions = new() { FullWidth = true };
    private bool createWordDialogIsVisible; // Dialog penceresinin görünürlük durumu..
    private void OpenCreateWordDialog() => createWordDialogIsVisible = true; // Dialog penceresini görünür hale getirir..
    void CloseCreateWordDialog() => createWordDialogIsVisible = false; // Dialog penceresini kapatır..

    // Login sayfasına yönlendiriyor..
    void GoToLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        // AccessToken, username ve userId bilgisi localstorageden alınıyor.. Eğer null ise Login sayfasına yönlendiriliyor..
        accessToken = await localStorageService.GetItemAsStringAsync("AccessToken");
        username = await localStorageService.GetItemAsStringAsync("Username");
        userId = await localStorageService.GetItemAsStringAsync("id");

        if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(username))
        {
            GoToLoginPage();
        }
        else
        {
            accessToken = accessToken.Substring(1, (accessToken.Length - 2));
            userId = userId.Substring(1, (userId.Length - 2));

            // İlgili idye sahip kelime listesi userIdyi de kontrol ederek çekiliyor..
            //Burada appuseridnin kontrol edilme sebebi, kullanıcının id kısmına rastgele bir sayı girip başkasının listesini çekmesini önlemek..
            await GetSelectedWordList();

            // UserId bilgisi de kontrol edilerek page ve sizea göre ilgili idye sahip listesinin altındaki kelimeler çekiliyor..
            await GetAllWordsBySelectedWordList(0, rowsPerPage);

        }

    }

    // İlgili idye sahip kelime listesi userIdyi de kontrol ederek çekiliyor..
    async Task GetSelectedWordList()
    {
        var response = await _wordListApiService.GetWordListByIdAndUserIdAsync(new(){ Id = Id, AppUserId = userId}, accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            wordList = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
        {
            // Seçili liste yoksa..
            wordList = null;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            isUnauthorized = true;
            // ShowNotification("Kelime listelerini görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Kelime listelerinizi çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // UserId bilgisi de kontrol edilerek page ve sizea göre ilgili idye sahip listesinin altındaki kelimeler çekiliyor..
    async Task GetAllWordsBySelectedWordList(int page, int size)
    {
        var response = await _wordApiService.GetAllWordsByUserIdAndWordListIdAsync(new() { Page = page, Size = size, AppUserId = userId, WordListId = Id }, accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..
            Words = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
        {
            // Seçili listede eleman yoksa..
            Words = null;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Kelime listelerini görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Kelime listelerinizi çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }

    // Yeni kelime listesi oluşturur..
    async Task CreateWord()
    {
        // Kullanıcının idsi alınıyor..
        createWordRequest.WordListId = Id;
        // Actiona istekte bulunuyor..
        var response = await _wordApiService.CreateWordAsync(createWordRequest, accessToken);
        if (response == System.Net.HttpStatusCode.Created)
        {
            // İşlem başarılıysa..

            // Liste sayısı çekiliyor..
            // await GetTotalCountByUserId();

            // Güncel listeyi çeker..
            await GetAllWordsBySelectedWordList(_selectedPage - 1, rowsPerPage);

            CloseCreateWordDialog(); // Dialog penceresini kapatır..

            ShowNotification("Kelime eklendi.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişi..
            // isUnauthorized = true;
            ShowNotification("Kelime ekleme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
        createWordRequest = new();
    }

    Word selectedWord = new Word();
    // Göster/Gizle butonuna tıklandığında çalışır.. Parametredeki kelime idsi ile ilişkili cümleleri çeker..
    private async Task ShowBtnPress(Word word)
    {
        if (selectedWord != word)
        {
            selectedWord.ShowDetails = false;
        }
        // Words.ForEach(word => word.ShowDetails = false);
        selectedWord = word;

        var response = await _sentenceApiService.GetSentencesByWordIdAsync(word.Id, accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..
            Sentences = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
        {
            // Seçili listede eleman yoksa..
            Sentences = null;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Cümleleri görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Kelimeye ait cümleleri çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
        }

        selectedWord.ShowDetails = !selectedWord.ShowDetails;
    }
}
