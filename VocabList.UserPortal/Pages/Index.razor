@page "/"

<PageTitle>Anasayfa</PageTitle>

@using VocabList.UserPortal.Data
@using VocabList.UserPortal.Data.WordLists
@using VocabList.UserPortal.Services
@inject WordListApiService _wordListApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

<SurveyPrompt Title=@SurveyTitle />
<style>
    .page-item {
        cursor: pointer;
    }

    .mud-select {
        max-width: max-content;
    }
</style>
@* <MudGrid Spacing="10" Justify="Justify.Center">
    <MudItem>
        <MudTooltip Text="Yeni Liste Oluştur">
            <MudPaper @onclick=@OpenCreateWordListDialog Height="200px" Width="200px" class="d-flex align-items-center justify-content-center" Style="cursor:pointer">
                <img src="icons/plus-solid.svg" />
                <MudFab Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" />
            </MudPaper>
        </MudTooltip>
    </MudItem>
</MudGrid> *@

@if (isUnauthorized)
{
    <UnauthorizedTransactions></UnauthorizedTransactions>
}
else
{
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateWordListDialog" Color="Color.Info">Liste Oluştur</MudButton>
    <br />
    <MudToolBar>
        <MudText Typo="Typo.h6">Kelime Listelerim</MudText>
        <MudSpacer />

        @* <MudSelect Dense="true" T="string" Label="Sırala" HelperText="Oluşturma tarihine göre sıralama yapın.." Variant="Variant.Text" SelectedValuesChanged="HandleValueChanged" @bind-Value="@orderByDescending">
    <MudSelectItem Value="@("false")">Eskiden yeniye</MudSelectItem>
    <MudSelectItem Value="@("true")">Yeniden eskiye</MudSelectItem>
    </MudSelect> *@

        <MudTextField @bind-Value="filterRequest.SearchString" Label=" " Placeholder="Arama yap" HelperTextOnFocus="true" HelperText="Arama sonuçlarını görmek için enter'a basın.." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" @onkeyup="HandleKeyUp"></MudTextField>

    </MudToolBar>
    <br />
    <MudTable Items="@wordLists" RowsPerPage=100 Hover="true" FixedHeader="true" Style="width:100%">
        <ToolBarContent>
            <div class="d-flex justify-content-end align-items-center" style="position: absolute; right: 0px;">
                <MudNumericField @bind-Value="rowsPerPage" Label="Liste Sayısı" HelperTextOnFocus="true" HelperText="1-100 arası bir değer girin ve enter'a basın.." Min="1" Max="100" Variant="Variant.Text" OnKeyUp="HandleKeyUp" Style="max-width: max-content;" />
                <MudSpacer />
                <MudSelect Dense="true" T="string" Label="Sırala" HelperTextOnFocus="true" HelperText="Tarih veya liste adına göre sıralama yapabilirsiniz.." Variant="Variant.Text" SelectedValuesChanged="HandleValueChanged" @bind-Value="@orderString">
                    <MudSelectItem Value="@("UpdatedDate ASC")">Değiştirme Tarihi (Eskiden yeniye)</MudSelectItem>
                    <MudSelectItem Value="@("UpdatedDate DESC")">Değiştirme Tarihi (Yeniden eskiye)</MudSelectItem>
                    <MudSelectItem Value="@("CreatedDate ASC")">Oluşturma Tarihi (Eskiden yeniye)</MudSelectItem>
                    <MudSelectItem Value="@("CreatedDate DESC")">Oluşturma Tarihi (Yeniden eskiye)</MudSelectItem>
                    <MudSelectItem Value="@("Name ASC")">Liste Adı (A-Z)</MudSelectItem>
                    <MudSelectItem Value="@("Name DESC")">Liste Adı (Z-A)</MudSelectItem>
                </MudSelect>
            </div>
        </ToolBarContent>
        <HeaderContent>
            @* <MudTh>ID</MudTh> *@
            <MudTh>Listenin Adı</MudTh>
            <MudTh>Oluşturulma Tarihi</MudTh>
            <MudTh>Değiştirildiği Tarih</MudTh>
        </HeaderContent>
        <RowTemplate>
            @* <MudTd DataLabel="Id">@context.id</MudTd> *@
            <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="CreatedDate">@context.CreatedDate.ToShortDateString()</MudTd>
                <MudTd DataLabel="UpdatedDate">@(context.UpdatedDate is not null ? context.UpdatedDate.Value.ToShortDateString() : "-") </MudTd>
                <MudTd Style="text-align: right">
                    <MudIconButton OnClick="@(() => GoToWordListPage(context))" Size="@Size.Small"> <img src="icons/eye-solid.svg" /></MudIconButton>
                    <MudIconButton OnClick="@(() => GetWordListInfo(context))" Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" />
                    <MudIconButton OnClick="@(() => DeleteWordList(context))" Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                @* <MudPagination ShowFirstButton="true" ShowLastButton="true" ShowNextButton="true" ShowPreviousButton="true" BoundaryCount="2" MiddleCount="3" SelectedChanged="PageChanged" Count="@pageCount" Class="pa-4" /> *@
                <nav aria-label="Page navigation example">
                    <div class="d-flex justify-content-between">
                        <div class="pagination-info d-flex justify-content-center align-items-center flex-column">Toplam Liste Sayısı: @TotalWordListCountOfTheUser</div>
                    <ul class="pagination justify-content-end">
                        <li class="page-item @GetPreviousButtonClass(_selectedPage)">
                            <a class="page-link" @onclick=@(() => PageChanged(1)) tabindex="-1">İlk</a>
                        </li>
                        <li class="page-item @GetPreviousButtonClass(_selectedPage)">
                            <a class="page-link" @onclick=@(() => PageChanged(_selectedPage - 1)) tabindex="-1">Önceki</a>
                        </li>

                        @* @for (int i = 1; i <= pageCount; i++)
                    {
                    int pageNumber = i;
                    if (pageNumber.Equals(_selectedPage))
                    {
                    <li class="page-item active"><a class="page-link" @onclick=@(() => @PageChanged(pageNumber))>@pageNumber</a></li>
                    }
                    else
                    {
                    <li class="page-item"><a class="page-link" @onclick=@(() => @PageChanged(pageNumber))>@pageNumber</a></li>
                    }
                    } *@

                        @foreach (var pageNumber in GetDisplayedPageNumbers())
                        {
                            if (pageNumber.Equals(_selectedPage))
                            {
                                <li class="page-item active"><a class="page-link" @onclick=@(() => @PageChanged(pageNumber))>@pageNumber</a></li>
                            }
                            else
                            {
                                <li class="page-item"><a class="page-link" @onclick=@(() => @PageChanged(pageNumber))>@pageNumber</a></li>
                            }
                        }
                        <li class="page-item @GetNextButtonClass(_selectedPage)">
                            <a class="page-link" @onclick=@(() => PageChanged(_selectedPage + 1))>Sonraki</a>
                        </li>
                        <li class="page-item @GetNextButtonClass(_selectedPage)">
                            <a class="page-link" @onclick=@(() => PageChanged(pageCount))>Son</a>
                        </li>

                    </ul>
                </div>
            </nav>
        </PagerContent>
    </MudTable>
}

@if (wordLists is null)
{
    <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" NoIcon="true" Class="mb-2 mt-3">Liste bulunamadı.</MudAlert>
}

<MudDialog @bind-IsVisible="createWordListDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Yeni Liste Ekle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="createWordListRequest.Name" Label="Listenin Adı" HelperText="Lütfen eklemek istediğiniz liste için bir isim belirleyin.." Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="CreateWordList" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseCreateWordListDialog" Class="px-10">İptal</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="updateWordListDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> @updateWordListRequest.Name Listesini Düzenle
        </MudText>
    </TitleContent>
    <DialogContent>
        @* Buraya oluşturulma ve güncellenme tarihleri de eklenecek.. *@
        <MudTextField @bind-Value="@updateWordListRequest.Name" Label="Listenin Adı" HelperText="Lütfen liste için bir isim belirleyin.." Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="UpdateWordList" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseUpdateWordListDialog" Class="px-10">Kapat</MudButton>
    </DialogActions>
</MudDialog>

@code {
    Data.WordLists.CreateWordListRequest createWordListRequest = new Data.WordLists.CreateWordListRequest();
    Data.WordLists.WordList updateWordListRequest = new Data.WordLists.WordList();
    List<Data.WordLists.WordList> wordLists = new List<Data.WordLists.WordList>();
    int TotalWordListCountOfTheUser;

    /* const */
    int rowsPerPage = 10; // Sayfa başına gösterilecek liste sayısı
    int pageCount; // Toplam sayfa sayısı
    int _selectedPage = 1; // Seçili olan sayfanın numarası

    // string orderByDescending;
    string orderString;
    // Sıralama (Sort-OrderBy) seçeneklerini tutar..
    public static readonly string[] sortOptions = { "CreatedDate ASC", "CreatedDate DESC", "UpdatedDate ASC", "UpdatedDate DESC", "Name ASC", "Name DESC" };

    WordListFilterRequest filterRequest = new WordListFilterRequest();
    // WordListFilterResponse filterResponse = new WordListFilterResponse();

    #region Paginition İşlemleri
    // Paginitiondaki önceki ve sonraki sayfa butonlarının tıklanabilir olma özelliğini ayarlamak için..
    // _selectedPage 1'e veya pageCounta eşitse classa disabled basılacak..
    private string GetPreviousButtonClass(int selectedNumber) => selectedNumber == 1 ? "disabled" : "";
    private string GetNextButtonClass(int selectedNumber) => selectedNumber == pageCount ? "disabled" : "";

    // Sayfa numaralarını yazdırmak için..
    private List<int> GetDisplayedPageNumbers()
    {
        List<int> displayedPages = new List<int>();

        if (pageCount <= 3)
        {
            // Sayfa sayısı 3 ve daha az ise tüm sayfaları listeye ekler..
            displayedPages.AddRange(Enumerable.Range(1, pageCount));
        }
        else
        {
            // Seçili olan sayfa 1. sayfa değilse seçili sayfanın bir eksiği ve seçili sayfayı listeye ekler..
            if (_selectedPage > 1) displayedPages.Add(_selectedPage - 1);
            displayedPages.Add(_selectedPage);
            if (_selectedPage < pageCount) displayedPages.Add(_selectedPage + 1); // Seçili olan sayfa toplam sayfa sayısından küçükse seçili sayfanın 1 fazlasını listeye ekler..
        }

        return displayedPages;
    }
    #endregion

    string SurveyTitle = string.Empty;
    String accessToken = string.Empty;
    String userId = string.Empty;
    String username = string.Empty;
    bool isUnauthorized = false;

    private DialogOptions dialogOptions = new() { FullWidth = true };
    private bool createWordListDialogIsVisible; // Dialog penceresinin görünürlük durumu..
    private void OpenCreateWordListDialog() => createWordListDialogIsVisible = true; // Dialog penceresini görünür hale getirir..
    void CloseCreateWordListDialog() => createWordListDialogIsVisible = false; // Dialog penceresini kapatır..

    private bool updateWordListDialogIsVisible;
    private void OpenUpdateWordListDialog() => updateWordListDialogIsVisible = true;
    void CloseUpdateWordListDialog() => updateWordListDialogIsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        // AccessToken, username ve userId bilgisi localstorageden alınıyor.. Eğer null ise Login sayfasına yönlendiriliyor..
        accessToken = await localStorageService.GetItemAsStringAsync("AccessToken");
        username = await localStorageService.GetItemAsStringAsync("Username");
        userId = await localStorageService.GetItemAsStringAsync("id");

        if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(username))
        {
            GoToLoginPage(); // Login sayfasına yönlendirir..
        }
        else
        {
            accessToken = accessToken.Substring(1, (accessToken.Length - 2));
            userId = userId.Substring(1, (userId.Length - 2));

            SurveyTitle = $"Merhaba {username}, kelime listeleri oluşturabilir ve pratik yapabilirsin..";

            // URL'den parametreleri okur ve filtreleri günceller
            var uri = new Uri(navigationManager.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("SearchString", out var searchString))
            {
                filterRequest.SearchString = searchString; // Aranılan Kelime (Name kolonu için)
            }

            // if (query.TryGetValue("OrderByDate", out var orderByDateString) && bool.TryParse(orderByDateString, out var orderByDateValue))
            // {
            //     filterRequest.OrderByDescending = orderByDateValue; // Sıralama
            //     if (filterRequest.OrderByDescending)
            //     {
            //         orderByDescending = "true";
            //     }
            //     else
            //     {
            //         orderByDescending = "false";
            //     }
            // }
            // else
            // {
            //     orderByDescending = "false";
            //     // filterRequest.OrderByDescending = false;
            // }

            if (query.TryGetValue("Sort", out var sort))
            {
                filterRequest.Sort = sort; // Sıralama Seçeneği (Value, Description, Type, UpdatedDate, CreatedDate)
            }

            if (query.TryGetValue("OrderBy", out var orderBy))
            {
                filterRequest.OrderBy = orderBy; // Sıralama biçimi (ASC - DESC)
            }

            orderString = filterRequest.Sort + " " + filterRequest.OrderBy; // dropdown seçili hale getiriliyor..
            bool isOrderValid = sortOptions.Contains(orderString);

            if (!isOrderValid)
            { // Kullanıcı urlden sort ve orderby değerlerine anlamsız bir şey girdiğinde varsayılan değerlere göre sıralama yapacak..
                filterRequest.Sort = "UpdatedDate";
                filterRequest.OrderBy = "DESC";
                orderString = filterRequest.Sort + " " + filterRequest.OrderBy;
            }

            if (query.TryGetValue("Page", out var pageNumberString) && int.TryParse(pageNumberString, out var pageNumberValue))
            {
                _selectedPage = pageNumberValue; // Seçili sayfa
            }

            if (query.TryGetValue("Size", out var sizeNumberString) && int.TryParse(sizeNumberString, out var sizeNumberValue))
            {
                // rowsPerPage = sizeNumberValue; // Seçili sayfa boyutu
                // RowsPerPage değerinin numericfield yerine doğrudan urlden değiştirilmesi durumu için..
                rowsPerPage = sizeNumberValue < 1 ? 1 : sizeNumberValue > 100 ? 100 : sizeNumberValue;
            }

            // Kullanıcıya ait kelime listeleri çekiliyor..(İlk sayfa - 10 adet liste)
            // await GetAllWordListsByUserId(0, rowsPerPage);
            await GetFilteredWordListsAsync((_selectedPage - 1), rowsPerPage);

            // Kullanıcıya ait toplam kelime listesi sayısı çekiliyor..
            // await GetTotalCountByUserId();
        }

    }

    #region Filtreleme Öncesi Listeleme Kodları..
    // async Task GetTotalCountByUserId()
    // {
    //     var response = await _wordListApiService.GetTotalCountByUserId(new(){ AppUserId = userId }, accessToken);
    //     if (response.Item2 == System.Net.HttpStatusCode.OK)
    //     {
    //         // İşlem başarılıysa..

    //         // Kullanıcının toplam liste sayısı alınıyor..
    //         TotalWordListCountOfTheUser = response.Item1;

    //         // Sayfa sayısı hesaplanıyor..
    //         if (TotalWordListCountOfTheUser % rowsPerPage == 0)
    //         {
    //             // Toplam liste sayısı sayfa başına gösterilecek liste sayısına tam bölünüyorsa sayfa sayısı bölme işleminin sonucu kadardır..
    //             pageCount = TotalWordListCountOfTheUser / rowsPerPage;
    //         }
    //         else
    //         {
    //             // Toplam liste sayısının sayfa başına gösterilecek liste sayısına bölümü kalanlıysa sayfa sayısı 1 fazla olacak..
    //             pageCount = (TotalWordListCountOfTheUser / rowsPerPage) + 1;
    //         }
    //     }
    //     else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
    //     {
    //         // Yetkisiz kullanıcı..
    //         ShowNotification("Kullanıcı bazlı kelime listesi sayısını görme yetkiniz bulunmamaktadır.", Severity.Warning);
    //     }
    //     else
    //     {
    //         // Diğer hata durumları..
    //         ShowNotification("İşlem sırasında beklenmeyen bir hata meydana geldi.", Severity.Error);
    //     }
    // }

    // // Kullanıcıya ait kelime listeleri (page ve size bilgine göre) çekiliyor..
    // async Task GetAllWordListsByUserId(int page, int size)
    // {

    //     var response = await _wordListApiService.GetAllWordListsByUserIdAsync(new() { Page = page, Size = size, AppUserId = userId }, accessToken);
    //     if (response.Item2 == System.Net.HttpStatusCode.OK)
    //     {
    //         // İşlem başarılıysa..
    //         wordLists = response.Item1;
    //     }
    //     else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
    //     {
    //         // Yetkisiz kullanıcı..
    //         ShowNotification("Kelime listelerini görme yetkiniz bulunmamaktadır.", Severity.Warning);
    //     }
    //     else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
    //     {
    //         // Bu üyenin kayıtlı bir kelime listesi bulunmuyorsa..
    //         wordLists = null;
    //     }
    //     else
    //     {
    //         // Diğer hata durumları..
    //         ShowNotification("Kelime listelerinizi çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
    //     }
    // }
    #endregion

    // Sayfa değiştirilince tetiklenir..
    private async Task PageChanged(int selectedPage)
    {
        _selectedPage = selectedPage;
        // Seçili olan sayfa 1 ise aslında 0.sayfayı getirmesi gerekiyor, bu yüzden 1 eksiği parametre olarak veriliyor..
        // await GetAllWordListsByUserId((selectedPage - 1), rowsPerPage);
        // Seçili olan sayfa 1 ise aslında 0.sayfayı getirmesi gerekiyor, bu yüzden 1 eksiği parametre olarak veriliyor..
        // await GetFilteredWordListsAsync((_selectedPage - 1), rowsPerPage);
        UpdateUrl(_selectedPage);
    }

    // Login sayfasına yönlendiriyor..
    void GoToLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    // Yeni kelime listesi oluşturur..
    async Task CreateWordList()
    {
        // Kullanıcının idsi alınıyor..
        createWordListRequest.AppUserId = userId;
        // Actiona istekte bulunuyor..
        var response = await _wordListApiService.CreateWordListAsync(createWordListRequest, accessToken);
        if (response == System.Net.HttpStatusCode.Created)
        {
            // İşlem başarılıysa..

            // Liste sayısı çekiliyor..
            // await GetTotalCountByUserId();

            // Güncel listeyi çeker..
            // await GetAllWordListsByUserId(_selectedPage - 1, rowsPerPage);
            await GetFilteredWordListsAsync(_selectedPage - 1, rowsPerPage);

            CloseCreateWordListDialog(); // Dialog penceresini kapatır..

            ShowNotification("Kelime listesi oluşturuldu.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişi..
            // isUnauthorized = true;
            ShowNotification("Kelime listesi ekleme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
        createWordListRequest = new();
    }

    // Kelime listesi tablosunda edit butonuna tıklandığı zaman listenin bilgilerini getirecek olan method.. Sonuçları bir dialog penceresi açarak sunar..
    async Task GetWordListInfo(Data.WordLists.WordList wordList)
    {
        // Parametrede gelen liste bilgisi modele atanıyor..
        // updateWordListRequest = wordList;
        updateWordListRequest = new() { Id = wordList.Id, AppUserId = wordList.AppUserId, CreatedDate = wordList.CreatedDate, UpdatedDate = wordList.UpdatedDate, Name = wordList.Name };

        // Dialog penceresini açar..
        OpenUpdateWordListDialog();
    }

    // Kelime listesini günceller..
    async Task UpdateWordList()
    {
        var response = await _wordListApiService.UpdateWordListAsync(updateWordListRequest, accessToken);
        if (response == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..

            // Güncel listeyi çeker..
            // await GetAllWordListsByUserId(_selectedPage - 1, rowsPerPage);
            await GetFilteredWordListsAsync(_selectedPage - 1, rowsPerPage);

            CloseUpdateWordListDialog(); // Dialog penceresini kapatır..

            ShowNotification("Kelime listesi güncellendi.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.NotFound)
        {
            // İlgili liste bulunamadı..
            ShowNotification("İlgili liste bulunamadı.", Severity.Warning);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Kelime listesi güncelleme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // İlgili kelime listesini siler..
    async Task DeleteWordList(Data.WordLists.WordList request)
    {
        var response = await _wordListApiService.DeleteWordListAsync(request.Id, accessToken);
        if (response == System.Net.HttpStatusCode.NoContent)
        {// İşlem başarılıysa..
         // Liste sayısı çekiliyor..
         // await GetTotalCountByUserId();
            TotalWordListCountOfTheUser -= 1; // Toplam liste sayısı 1 azalıyor..

            await CalculateTotalPageCount(TotalWordListCountOfTheUser, rowsPerPage);

            // Bir liste silindiğinde toplam liste sayısı 1 azalacak, sayfa sayısı da 1 azalmış olabilir.. Eğer son sayfa seçiliyse ve sayfa sayısı 1 azaldıysa seçili olan sayfa da 1 azalmalı..

            if (_selectedPage > pageCount)
            {
                _selectedPage -= 1;
                UpdateUrl(_selectedPage);// Seçili sayfa sayısı da 1 azaldığı için url güncellenir..
            }

            // Kelime listesi güncelleniyor..
            // await GetAllWordListsByUserId(_selectedPage - 1, rowsPerPage);
            await GetFilteredWordListsAsync(_selectedPage - 1, rowsPerPage);

            ShowNotification("Liste başarıyla silinmiştir.", Severity.Success);
        }
        else if (response == System.Net.HttpStatusCode.NotFound)
        {
            // Bu id ile kayıtlı bir liste bulunmuyorsa..
            ShowNotification("İlgili liste bulunamadı.", Severity.Warning);
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kişiyse..
            // isUnauthorized = true;
            ShowNotification("Kelime listesi silme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }

    // WordList.razor sayfasına yönlendiriyor..
    void GoToWordListPage(Data.WordLists.WordList wordList)
    {
        navigationManager.NavigateTo($"/word-lists/{wordList.Id}");
    }

    private async Task HandleKeyUp(KeyboardEventArgs args)
    {
        // Enter tuşuna basıldığında çalışır..
        if (args.Key == "Enter")
        {
            // Filtreleme yapılacağı için seçili sayfa 1 olarak güncelleniyor..
            _selectedPage = 1;
            filterRequest.Size = rowsPerPage;

            // await GetFilteredWordListsAsync(_selectedPage - 1, rowsPerPage);

            // Url güncellenir..
            UpdateUrl(_selectedPage);
        }
    }

    // Sıralama dropdownında seçim yapılınca tetiklenir..
    private async Task HandleValueChanged()
    {
        // Filtreleme yapılacağı için seçili sayfa 1 olarak güncelleniyor..
        _selectedPage = 1;

        // await GetFilteredWordListsAsync(_selectedPage - 1, rowsPerPage);

        string[] orderWords = orderString.Split(' ');

        filterRequest.Sort = orderWords[0];
        filterRequest.OrderBy = orderWords[1];

        // Url güncellenir
        UpdateUrl(_selectedPage);
    }

    // Filtreleri ve sıralama durumunu kullanarak URL güncellenir..
    void UpdateUrl(int page)
    {
        // var uriBuilder = new UriBuilder(navigationManager.Uri)
        //     {
        //         Query = $"Name={Uri.EscapeDataString(filterRequest.Name)}&OrderByDate={filterRequest.OrderByDescending}&Page={page}"
        //     };

        var uriBuilder = new UriBuilder(navigationManager.Uri);
        filterRequest.Page = page;
        filterRequest.Size = rowsPerPage;
        // filterRequest.OrderByDescending = orderByDescending.Equals("false") ? false : true; // Sıralama dropdownında seçilen değer requeste atanıyor..

        // Searchboxa değer girilmişse..
        // if (!string.IsNullOrEmpty(filterRequest.Name))
        // {
        //     uriBuilder.Query = $"Name={Uri.EscapeDataString(filterRequest.Name)}&OrderByDate={filterRequest.OrderByDescending}&Page={page}";
        // }
        // else
        // {
        //     uriBuilder.Query = $"OrderByDate={filterRequest.OrderByDescending}&Page={page}";
        // }

        // Searchboxa değer girilmişse..
        if (!string.IsNullOrEmpty(filterRequest.SearchString))
        {
            uriBuilder.Query = $"SearchString={Uri.EscapeDataString(filterRequest.SearchString)}&Sort={filterRequest.Sort}&OrderBy={filterRequest.OrderBy}&Page={filterRequest.Page}&Size={filterRequest.Size}";
        }
        else
        {
            uriBuilder.Query = $"Sort={filterRequest.Sort}&OrderBy={filterRequest.OrderBy}&Page={filterRequest.Page}&Size={filterRequest.Size}";
        }


        // Sayfayı günceller..
        navigationManager.NavigateTo(uriBuilder.Uri.ToString(), true);
        // navigationManager.NavigateTo(uriBuilder.Uri.ToString());
    }

    // Toplam sayfa sayısı hesaplanıyor..
    async Task CalculateTotalPageCount(int _totalWordListCount, int _rowsPerPage)
    {
        // Sayfa sayısı hesaplanıyor..
        if (_totalWordListCount % _rowsPerPage == 0)
        {
            // Toplam liste sayısı sayfa başına gösterilecek liste sayısına tam bölünüyorsa sayfa sayısı bölme işleminin sonucu kadardır..
            pageCount = _totalWordListCount / _rowsPerPage;
        }
        else
        {
            // Toplam liste sayısının sayfa başına gösterilecek liste sayısına bölümü kalanlıysa sayfa sayısı 1 fazla olacak..
            pageCount = (_totalWordListCount / _rowsPerPage) + 1;
        }
    }

    private async Task GetFilteredWordListsAsync(int page, int size)
    {
        // filterRequest.Page = (_selectedPage - 1);
        filterRequest.Page = page;
        filterRequest.Size = size;
        filterRequest.AppUserId = userId;
        var response = await _wordListApiService.GetFilteredWordListsAsync(filterRequest, accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılı..

            // Liste güncelleniyor..
            wordLists = response.Item1.WordLists;

            // Kullanıcının toplam liste sayısı alınıyor..
            TotalWordListCountOfTheUser = response.Item1.TotalCount;

            // Sayfa sayısı hesaplanıyor..
            await CalculateTotalPageCount(TotalWordListCountOfTheUser, rowsPerPage);
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kullanıcı..
            isUnauthorized = true;
            ShowNotification("Kelime listelerini görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else if (response.Item2 == System.Net.HttpStatusCode.NotFound)
        {
            // Bu üyenin kayıtlı bir kelime listesi bulunmuyorsa..
            wordLists = null;
            TotalWordListCountOfTheUser = 0;
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Kelime listelerinizi çekerken beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }
}