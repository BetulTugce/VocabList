@* @page "/update-password/{userId}/{resetToken}" *@
@* @page "/update-password/{userId}/{*Token}" *@
@page "/update-password/{userId}"

<PageTitle>VocabList | Parola Sıfırlama</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using VocabList.UserPortal.Data.Users
@using VocabList.UserPortal.Services
@inject AuthApiService _authApiService
@inject UserApiService _userApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService

@if (verificationResult)
{
    <MudGrid Class="d-flex align-center justify-center">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <h2 class="mb-4">Yeni Parola Oluştur</h2>
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Parola" HelperText="Güçlü bir parola seç" @bind-Value="requestModel.Password" InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true" RequiredError="Parola zorunlu!" />
                    <MudTextField T="string" Label="Parola" HelperText="Parolayı tekrarla" @bind-Value="requestModel.PasswordConfirm" InputType="InputType.Password" Validation="@(new Func<string, string>(PasswordMatch))" />
                    <br />
                    <div class="d-flex align-center justify-space-between">
                        <div class="d-flex align-center"></div>
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.ResetAsync())" Class="ml-2">TEMİZLE</MudButton>
                            <div class="ml-2"></div>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="UpdatePasswordAsync" Class="ml-auto">GÜNCELLE</MudButton>
                        </div>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <MudAlert Severity="severity" Variant="Variant.Filled">
        @message
    </MudAlert>

}

@code {
    [Parameter]
    public string? userId { get; set; }

    // [Parameter]
    // public string? resetToken { get; set; }

    [Parameter]
    public string? Token { get; set; }

    bool verificationResult = false;

    string message = "Geçersiz veya süresi dolmuş bir sıfırlama bağlantısı. Lütfen yeni bir sıfırlama isteği gönderin.";
    Severity severity = Severity.Error;

    protected override async Task OnInitializedAsync()
    {
        // Query string değeri alınır..
        var uri = new Uri(navigationManager.Uri);
        var tokenValue = uri.Query.Split('=')[1];

        // Token parametresine değeri atar..
        Token = tokenValue;

        // Token doğrulanıyor..
        if (!string.IsNullOrEmpty(userId) && !string.IsNullOrEmpty(Token))
        {
            verificationResult = await VerifyResetToken();
        }
    }

    private async Task<bool> VerifyResetToken()
    {
        // VerifyResetToken action'ına servis aracılığıyla istekte bulunuyor..
        var response = await _authApiService.VerifyResetTokenAsync(new VerifyPasswordResetTokenRequest
            {
                UserId = userId,
                ResetToken = Token
            });

        // VerifyResetToken actionının sonucuna göre true veya false döndürür.
        // True : ResetToken geçerli
        // False : ResetToken geçerli değil
        return response.State;
    }


    UpdatePasswordRequest requestModel = new UpdatePasswordRequest();
    bool success;
    string[] errors = { };
    MudForm form;
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Parola zorunlu!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Parola en az 8 karakter uzunluğunda olmalıdır!";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Parola en az bir büyük harf içermelidir!";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Parola en az bir küçük harf içermelidir!";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Parola en az bir rakam içermelidir!";
    }

    private string PasswordMatch(string arg)
    {
        if (requestModel.Password != arg)
            // return "Passwords don't match";
            return "Parolalar eşleşmiyor!";
        return null;
    }

    async Task UpdatePasswordAsync()
    {
        requestModel.ResetToken = Token;
        requestModel.UserId = userId;
        var response = await _userApiService.UpdatePasswordAsync(requestModel);
        if (response == System.Net.HttpStatusCode.OK)
        {
            // Parola başarıyla güncellendi..
            severity = Severity.Success;
            message = "Parolanız başarıyla güncellenmiştir.";
            verificationResult = false;
        }
        else
        {
            severity = Severity.Error;
            message = "İşlem sırasında beklenmeyen bir hata meydana geldi.";
            verificationResult = false;
        }
    }
}
