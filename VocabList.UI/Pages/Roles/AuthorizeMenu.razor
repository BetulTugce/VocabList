@page "/authorize-menu"

<PageTitle>VocabList | Yetkilendirme Menüsü</PageTitle>

@using VocabList.UI.Data.ApplicationServices
@using VocabList.UI.Data.AuthorizationEndpoints
@using VocabList.UI.Data.Roles
@using VocabList.UI.Services
@using VocabList.UI.Utilities
@inject ApplicationServiceApiService _applicationServiceApiService
@inject RoleApiService _roleApiService
@inject AuthorizationEndpointApiService _authorizationEndpointApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IDialogService DialogService

@if (Menus.Any())
{
    <MudTreeView T="string" ExpandOnDoubleClick="true" Width="100%" Hover="true">
        @foreach (var menu in Menus)
        {
            <MudTreeViewItem Value="@(menu.Name)">
                @if (menu.Actions.Any())
                {
                    foreach (var action in menu.Actions)
                    {
                        @* <MudTreeViewItem Value="@(action.Definition)" /> *@
                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                            <MudTreeViewItem Value="@(action.Definition)" />
                                <div style="justify-self: end;">
                                <MudIconButton OnClick="@(() => ShowDetails(menu.Name, action))" Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" />
                                </div>
                            </div>
                    }
                }
            </MudTreeViewItem>
        }
    </MudTreeView>
}
@if (isUnauthorized)
{
    <UnauthorizedTransactions></UnauthorizedTransactions>
}

<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> @_selectedMenu
        </MudText>
    </TitleContent>
    <DialogContent>
        <p>@_selectedAction.HttpType</p>
        <p>@_selectedAction.ActionType</p>
        <p>@_selectedAction.Definition</p>
        <p>@_selectedAction.Code</p>

        <MudSelect T="string" Label="Roller" HelperText="Endpointe atamak istediğiniz rolleri seçin.." MultiSelection="true" @bind-SelectedValues="rolesOfTheEndpoint" >
            @foreach (var role in Roles.datas)
            {
                <MudSelectItem T="string" Value="@role.name">@role.name</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => AssignSelectedRoles(_selectedMenu, _selectedAction.Code, rolesOfTheEndpoint.ToArray()))" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseDialog" Class="px-10">Kapat</MudButton>
    </DialogActions>
</MudDialog>

@code {
    List<GetAuthorizeDefinitionEndpointsResponse> Menus { get; set; } = new List<GetAuthorizeDefinitionEndpointsResponse>();
    bool isUnauthorized = false;
    String accessToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // AccessToken bilgisi localstorageden alınıyor..
        accessToken = await localStorageService.GetItemAsStringAsync("AccessToken");
        if (!string.IsNullOrEmpty(accessToken))
        {
            accessToken = accessToken.Substring(1, (accessToken.Length - 2));

            // AuthorizeDefinition attributeu ile işaretli endpoint bilgileri alınıyor..
            await GetAuthorizeDefinitionEndpoints();
        }
        
    }

    // AuthorizeDefinition attributeu ile işaretli endpoint bilgileri alınıyor..
    async Task GetAuthorizeDefinitionEndpoints()
    {
        // AuthorizeDefinition attributeu ile işaretlenmiş tüm endpointleri getirecek olan methoda istek gönderiliyor..
        var response = await _applicationServiceApiService.GetAuthorizeDefinitionEndpoints(accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İstek başarılıysa elemanlar listeye atanıyor..
            Menus = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkilendirilmemiş kullanıcı ise..
            isUnauthorized = true;
        }
        // else if (response.Item2 == System.Net.HttpStatusCode.BadRequest)
        // {

        // }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }

    private bool visible;
    private int rating;
    // private void OpenDialog() => visible = true;
    void CloseDialog() => visible = false;

    private DialogOptions dialogOptions = new() { FullWidth = true };

    GetAuthorizeDefinitionEndpointsResponse.Action _selectedAction;
    string _selectedMenu = string.Empty;

    async Task ShowDetails(string selectedMenu, GetAuthorizeDefinitionEndpointsResponse.Action selectedAction)
    {
        _selectedMenu = selectedMenu;
        _selectedAction = selectedAction;

        // Tüm roller çekiliyor..
        await GetAllRoles();

        // Endpoinlere atanmış rolleri çekiliyor..
        await GetRolesToEndpoint(new(){ Code = selectedAction.Code, Menu = selectedMenu});

        // Dialog penceresi görünür hale getiriliyor..
        visible = true;
    }

    GetRolesQueryResponse Roles { get; set; } = new GetRolesQueryResponse();

    // Tüm rolleri getirir..
    async Task GetAllRoles()
    {
        var response = await _roleApiService.GetAllRoles(accessToken, new()
        {
             Page = -1, Size = -1
        });

        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İstek başarılıysa elemanlar listeye atanıyor..
            Roles = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkilendirilmemiş kullanıcı ise..
            isUnauthorized = true;
            // ShowNotification("Rolleri görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // Seçili endpointin rollerini tutar..
    IEnumerable<string> rolesOfTheEndpoint = new List<string>();

    // Endpoinlere atanmış rolleri çeker..
    async Task GetRolesToEndpoint(GetRolesToEndpointQueryRequest request)
    {
        var response = await _authorizationEndpointApiService.GetRolesToEndpointAsync(request, accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            rolesOfTheEndpoint = response.Item1.Roles;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkilendirilmemiş kullanıcı ise..
            isUnauthorized = true;
            // ShowNotification("Rollerle ilgili yetkiniz bulunmamaktadır..", Severity.Warning);
        }
        else
        {
            // Sunucu Hatası
            ShowNotification("Beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // İlgili endpointe seçili rolleri atar..
    async Task AssignRoleEndpoint(AssignRoleEndpointRequest request)
    {
        var response = await _authorizationEndpointApiService.AssignRoleEndpoint(request, accessToken);
        if (response == System.Net.HttpStatusCode.OK)
        {
            // Rol ataması başarılıysa..
            ShowNotification("Seçili roller endpointe başarıyla atanmıştır.", Severity.Success);
            CloseDialog();
        }
        else if (response == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkilendirilmemiş kullanıcı ise..
            isUnauthorized = true;
        }
        else
        {
            // Sunucu Hatası
            ShowNotification("Beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // Dialog penceresindeki kaydet butonuna tıklandığında AssignRoleEndpointi çağırır..
    async Task AssignSelectedRoles(string menu, string code, string[] roles)
    {
        await AssignRoleEndpoint(new() { Code = code, Menu = menu, Roles = roles });
    }
}
