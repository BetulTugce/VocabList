@page "/roles"

@using VocabList.UI.Data.Roles
@using VocabList.UI.Services
@inject RoleApiService _roleApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

@if (isUnauthorized)
{
    <UnauthorizedTransactions></UnauthorizedTransactions>
}else
{
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateRoleDialog" Color="Color.Info">Rol Ekle</MudButton>
    @if (RolesResponse.datas is not null)
    {
        <MudTable Items="@RolesResponse.datas" Hover="true" FixedHeader="true" Style="width:100%">
            <HeaderContent>
                @* <MudTh>ID</MudTh> *@
                <MudTh>Rol</MudTh>
            </HeaderContent>
            <RowTemplate>
                @* <MudTd DataLabel="Id">@context.id</MudTd> *@
                <MudTd DataLabel="Name">@context.name</MudTd>
                <MudTd Style="text-align: right">
                    @if (context.name == "Admin" || context.name == "Member")
                    {
                        <MudIconButton Disabled OnClick="@(() => GetRole(context))" Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" />
                        <MudIconButton Disabled OnClick="@(() => DeleteRole(context))" Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />
                    }
                    else
                    {
                        <MudIconButton OnClick="@(() => GetRole(context))" Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" />
                        <MudIconButton OnClick="@(() => DeleteRole(context))" Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />
                    }
                </MudTd>
                </RowTemplate>
                <PagerContent>
                <MudPagination ShowFirstButton="true" ShowLastButton="true" ShowNextButton="true" ShowPreviousButton="true" BoundaryCount="2" MiddleCount="3" SelectedChanged="PageChanged" Count="@pageCount" Class="pa-4" />
                </PagerContent>
            </MudTable>
    }
}

<MudDialog @bind-IsVisible="createRoleDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" /> Yeni Rol Ekle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudTextField @bind-Value="createRoleRequest.Name" Label="Rol" Required="true" RequiredError="Bu alan zorunlu!" HelperText="Lütfen eklemek istediğiniz rol için bir isim belirleyin.." Variant="Variant.Outlined" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Disabled="@(!success)" OnClick="CreateRole" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseCreateRoleDialog" Class="px-10">Kapat</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="updateRoleDialogIsVisible" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> @updateRoleRequest.Name Rolünü Düzenle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@success">
            <MudTextField @bind-Value="@updateRoleRequest.Name" Label="Rol" Required="true" RequiredError="Bu alan zorunlu!" HelperText="Lütfen rol için bir isim belirleyin.." Variant="Variant.Outlined" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Disabled="@(!success)" OnClick="UpdateRole" Class="px-10">Kaydet</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CloseUpdateRoleDialog" Class="px-10">Kapat</MudButton>
    </DialogActions>
</MudDialog>

@code {
    GetRolesQueryResponse RolesResponse { get; set; } = new GetRolesQueryResponse();
    CreateRoleRequest createRoleRequest { get; set; } = new CreateRoleRequest();
    UpdateRoleRequest updateRoleRequest { get; set; } = new UpdateRoleRequest();
    String accessToken = string.Empty;
    bool isUnauthorized = false;

    bool success;

    const int rowsPerPage = 10; // Sayfa başına gösterilecek rol sayısı
    int pageCount; // Toplam sayfa sayısı

    private bool createRoleDialogIsVisible;
    private void OpenCreateRoleDialog() => createRoleDialogIsVisible = true;
    void CloseCreateRoleDialog() => createRoleDialogIsVisible = false;

    private bool updateRoleDialogIsVisible;
    private void OpenUpdateRoleDialog() => updateRoleDialogIsVisible = true;
    void CloseUpdateRoleDialog() => updateRoleDialogIsVisible = false;

    private DialogOptions dialogOptions = new() { FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        // AccessToken bilgisi localstorageden alınıyor..
        accessToken = await localStorageService.GetItemAsStringAsync("AccessToken");
        accessToken = accessToken.Substring(1, (accessToken.Length - 2));

        // Rolleri getiriyor..(İlk sayfa - 10 rol)
        await GetAllRoles(0, rowsPerPage);
    }

    // Parametreye göre rolleri getirir..
    async Task GetAllRoles(int page, int size)
    {
        var response = await _roleApiService.GetAllRoles(accessToken, new()
            {
                Page = page,
                Size = size
            });

        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            RolesResponse.datas = null;
            // İstek başarılıysa elemanlar listeye atanıyor..
            RolesResponse = response.Item1;
            if (RolesResponse.totalCount % rowsPerPage == 0)
            {
                pageCount = RolesResponse.totalCount / rowsPerPage;
            }
            else
            {
                pageCount = (RolesResponse.totalCount / rowsPerPage) + 1;
            }
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkilendirilmemiş kullanıcı ise..
            isUnauthorized = true;
            // ShowNotification("Rolleri görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("Beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
        StateHasChanged();
    }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }

    int _selectedPage; // Seçili olan sayfanın numarası

    private async Task PageChanged(int selectedPage)
    {
        _selectedPage = selectedPage;
        // Seçili olan sayfa 1 ise aslında 0.sayfayı getirmesi gerekiyor, bu yüzden 1 eksiği parametre olarak veriliyor..
        await GetAllRoles((selectedPage - 1), rowsPerPage);
    }

    async Task CreateRole()
    {
        var response = await _roleApiService.CreateRoleAsync(createRoleRequest, accessToken);
        if (response)
        {
            // Rol tablosu güncelleniyor..
            await GetAllRoles(_selectedPage - 1, rowsPerPage);

            // RolesResponse.datas.Append(new(){ name = createRoleRequest.Name});
            CloseCreateRoleDialog();

            ShowNotification("Rol başarıyla eklenmiştir.", Severity.Success);
        }
        else
        {
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
        createRoleRequest = new();
    }

    async Task GetRole(GetRolesQueryResponse.Data role)
    {
        // Parametrede gelen rol updateRoleRequest modeline atanıyor..
        updateRoleRequest.Id = role.id;
        updateRoleRequest.Name = role.name;

        OpenUpdateRoleDialog();
    }

    async Task UpdateRole()
    {
        var response = await _roleApiService.UpdateRoleAsync(updateRoleRequest, accessToken);
        if (response)
        {
            // Rol tablosu güncelleniyor..
            await GetAllRoles(_selectedPage - 1, rowsPerPage);

            CloseUpdateRoleDialog();

            ShowNotification("Rol başarıyla güncellenmiştir.", Severity.Success);
        }else
        {
            ShowNotification("İşlem başarısız, bir hata meydana geldi.", Severity.Error);
        }
    }

    async Task DeleteRole(GetRolesQueryResponse.Data role)
    {
        var response = await _roleApiService.DeleteRoleAsync(new() { Id = role.id }, accessToken);
        if (response)
        {
            // RolesResponse.datas.Remove(role);

            // Rol silindiğinde toplam rol sayısı 1 azalacak, sayfa sayısı da 1 azalmış olabilir.. Eğer son sayfa seçiliyse ve sayfa sayısı 1 azaldıysa seçili olan sayfa da 1 azalmalı..
            RolesResponse.totalCount -= 1;
            if (RolesResponse.totalCount % rowsPerPage == 0)
            {
                pageCount = RolesResponse.totalCount / rowsPerPage;
            }
            else
            {
                pageCount = (RolesResponse.totalCount / rowsPerPage) + 1;
            }
            if (_selectedPage > pageCount)
            {
                _selectedPage -= 1;
            }

            // Rol tablosu güncelleniyor..
            await GetAllRoles(_selectedPage - 1, rowsPerPage);

            ShowNotification("Rol başarıyla silinmiştir.", Severity.Success);
        }
        else
        {
            ShowNotification("İşlem başarısız, beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }
}
