@page "/"

@using VocabList.UI.Data.Users
@using VocabList.UI.Data.Roles
@using VocabList.UI.Services
@inject UserApiService _userApiService
@inject RoleApiService _roleApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService


<PageTitle>VocabList</PageTitle>

@* TODO: Tasarım yapılacak.. *@

<p>Toplam kullanıcı sayısı : @TotalUsersCount</p>
<p>Toplam rol sayısı : @TotalRolesCount</p>

@code{
    int TotalUsersCount;
    int TotalRolesCount;

    String accessToken = string.Empty;
    String userId = string.Empty;
    String username = string.Empty;
    bool isUnauthorized = false;

    protected override async Task OnInitializedAsync()
    {
        // AccessToken bilgisi localstorageden alınıyor..
        accessToken = await localStorageService.GetItemAsStringAsync("AccessToken");
        username = await localStorageService.GetItemAsStringAsync("Username");
        userId = await localStorageService.GetItemAsStringAsync("id");

        if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(username))
        {
            GoToLoginPage();
        }
        else
        {
            accessToken = accessToken.Substring(1, (accessToken.Length - 2));
            userId = userId.Substring(1, (userId.Length - 2));

            // Toplam kullanıcı sayısı çekiliyor..
            await GetTotalUsersCount();
            
            // Toplam rol sayısı çekiliyor..
            await GetTotalRolesCount();
        }
    }

    // Login sayfasına yönlendiriyor..
    void GoToLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    async Task GetTotalUsersCount(){
        var response = await _userApiService.GetTotalCount(accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..
            TotalUsersCount = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kullanıcı..
            ShowNotification("Toplam kullanıcı sayısını görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem sırasında beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    async Task GetTotalRolesCount()
    {
        var response = await _roleApiService.GetTotalCount(accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..
            TotalRolesCount = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kullanıcı..
            ShowNotification("Toplam rol sayısını görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem sırasında beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }
}
