@page "/"

@using VocabList.UI.Data.Users
@using VocabList.UI.Data.Roles
@using VocabList.UI.Services
@inject UserApiService _userApiService
@inject RoleApiService _roleApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService


<PageTitle>VocabList</PageTitle>

@if (data.Any() && labels.Any())
{
    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels" LegendPosition="Position.Bottom" >
        <CustomGraphics>
            <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Toplam Kullanıcı</text>
            <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@TotalUsersCount.ToString()</text>
        </CustomGraphics>
    </MudChart>
}

@code{
    int TotalUsersCount;
    // int TotalRolesCount;
    List<UserRolesCountResponse> rolesCountResponses = new List<UserRolesCountResponse>();

    String accessToken = string.Empty;
    String userId = string.Empty;
    String username = string.Empty;
    bool isUnauthorized = false;

    public double[] data = Array.Empty<double>();
    public string[] labels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        // AccessToken bilgisi localstorageden alınıyor..
        accessToken = await localStorageService.GetItemAsStringAsync("AccessToken");
        username = await localStorageService.GetItemAsStringAsync("Username");
        userId = await localStorageService.GetItemAsStringAsync("id");

        if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(username))
        {
            GoToLoginPage();
        }
        else
        {
            accessToken = accessToken.Substring(1, (accessToken.Length - 2));
            userId = userId.Substring(1, (userId.Length - 2));

            // Toplam kullanıcı sayısı çekiliyor..
            await GetTotalUsersCount();

            // Toplam rol sayısı çekiliyor..
            // await GetTotalRolesCount();

            // Rolleri ve her bir rolün kaç kullanıcı içerdiğinin bilgisini döner..
            await GetRolesCountAsync();
        }
    }

    // Login sayfasına yönlendiriyor..
    void GoToLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    async Task GetRolesCountAsync()
    {
        var response = await _roleApiService.GetUserRolesAsync(accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..
            rolesCountResponses = response.Item1;
            // for (int i = 0; i < rolesCountResponses.Count; i++)
            // {
            //     data.Append(rolesCountResponses[i].Count);
            //     labels.Append(rolesCountResponses[i].Role);
            // }
            data = rolesCountResponses.Select(role => (double)role.Count).ToArray();
            labels = rolesCountResponses.Select(role => role.Role).ToArray();
            // TotalUsersCount = (int) data.Sum(); // Kullanıcı sayısı hesaplanırken her rolü ve role ait kaç kullanıcı olduğu bilgisi çekildiği için bir kullanıcı sahip olduğu her rol için tekrar sayılıyor. Bu yüzden toplam kullanıcı sayısını burdan almadım.
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kullanıcı..
            ShowNotification("Rollere göre kullanıcı sayısını görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem sırasında beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    async Task GetTotalUsersCount(){
        var response = await _userApiService.GetTotalCount(accessToken);
        if (response.Item2 == System.Net.HttpStatusCode.OK)
        {
            // İşlem başarılıysa..
            TotalUsersCount = response.Item1;
        }
        else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
        {
            // Yetkisiz kullanıcı..
            ShowNotification("Toplam kullanıcı sayısını görme yetkiniz bulunmamaktadır.", Severity.Warning);
        }
        else
        {
            // Diğer hata durumları..
            ShowNotification("İşlem sırasında beklenmeyen bir hata meydana geldi.", Severity.Error);
        }
    }

    // async Task GetTotalRolesCount()
    // {
    //     var response = await _roleApiService.GetTotalCount(accessToken);
    //     if (response.Item2 == System.Net.HttpStatusCode.OK)
    //     {
    //         // İşlem başarılıysa..
    //         TotalRolesCount = response.Item1;
    //     }
    //     else if (response.Item2 == System.Net.HttpStatusCode.Unauthorized)
    //     {
    //         // Yetkisiz kullanıcı..
    //         ShowNotification("Toplam rol sayısını görme yetkiniz bulunmamaktadır.", Severity.Warning);
    //     }
    //     else
    //     {
    //         // Diğer hata durumları..
    //         ShowNotification("İşlem sırasında beklenmeyen bir hata meydana geldi.", Severity.Error);
    //     }
    // }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }
}
