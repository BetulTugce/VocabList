@page "/login"

<PageTitle>VocabList | Giriş Yap</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using VocabList.UI.Data
@using VocabList.UI.Services
@using VocabList.UI.Utilities
@inject AuthApiService _authApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

<MudGrid Class="d-flex align-center justify-center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <h2 class="mb-4">Giriş Yap</h2>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Kullanıcı Adı/Email" Required="true" @bind-Value="requestModel.UsernameOrEmail" RequiredError="Lütfen kullanıcı adınızı veya emailinizi girin!" />
                <MudTextField T="string" Label="Parola" @bind-Value="requestModel.Password" InputType="InputType.Password" Required="true" RequiredError="Parola zorunlu!" />
                <br />
                <div class="d-flex align-center justify-space-between">
                    <div class="d-flex align-center"></div>
                    <div class="d-flex align-center">
                        <MudLink Target="_blank" Href="/" Typo="Typo.body2">Şifremi unuttum</MudLink>
                    </div>
                </div>
                <br />
                <div class="d-flex align-center justify-space-between">
                    <div class="d-flex align-center">
                        @* <MudCheckBox T="bool" Required="true" RequiredError="Kabul etmelisin!" />
                        <MudLink Href="/KVKK" Typo="Typo.body2">Kişisel Veriler Hakkındaki Protokolü okudum, kabul ediyorum.</MudLink> *@
                    </div>
                    <div class="d-flex align-center">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.ResetAsync())" Class="ml-2">TEMİZLE</MudButton>
                        <div class="ml-2"></div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="LoginAsync" Class="ml-auto">GİRİŞ YAP</MudButton>
                    </div>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    @* <MudItem xs="12" sm="5">
    <MudPaper Class="pa-4 mud-height-full">
    <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
    @foreach (var error in errors)
    {
    <MudText Color="@Color.Error">@error</MudText>
    }
    </MudPaper>
    </MudItem> *@
</MudGrid>


@code {
    bool success;
    string[] errors = { };
    MudForm form;
    string resultMessage = string.Empty;
    Severity severity = new();
    LoginUserRequest requestModel = new LoginUserRequest();

    [Inject]
    HttpClient Client { get; set; }

    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; }

    async Task LoginAsync()
    {
        try
        {
            // ApiService üzerinden giriş methodu çağırılıyor..
            var response = await _authApiService.LoginUserAsync(requestModel);
            if (response is not null)
            {
                LoginUserResponse responseModel = response;
                await localStorageService.SetItemAsync("AccessToken", responseModel.Token.AccessToken);
                await localStorageService.SetItemAsync("Username", responseModel.User.Username);
                StateHasChanged();
                // await localStorageService.SetItemAsync("Email", responseModel.User.Email);
                // await localStorageService.SetItemAsync("RefreshToken", responseModel.Token.RefreshToken);

                (authenticationStateProvider as AuthStateProvider).NotifyUserLogin(responseModel.User.Username);
                Client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", responseModel.Token.AccessToken);

                severity = Severity.Success;
                resultMessage = "Giriş başarılı! Anasayfaya yönlendiriliyorsunuz..";
                ShowNotification(resultMessage, severity);
                
                // Anasayfaya yönlendirmeden evvel 5sn gecikme eklendi. Kaldırıldığı zaman navigate ederken forcereload kullanıldığı için notification görüntülenemiyor..
                await Task.Delay(5000);

                navigationManager.NavigateTo("/", true);
            }
            else
            {  // response null ise..
                severity = Severity.Warning;
                resultMessage = "İşlem başarısız! Giriş bilgileriniz sistemimizdeki hesapla uyuşmuyor.";
                ShowNotification(resultMessage, severity);
            }
        }
        catch (Exception ex)
        {
            severity = Severity.Error;
            resultMessage = $"Giriş başarısız! (Sunucu hatası)";
            ShowNotification(resultMessage, severity);
            // Console.WriteLine($"Hata oluştu: {ex.Message}");
        }
    }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }

    //TODO: Bu sayfaya parolamı unuttum sayfası için bağlantı eklenecek..
}
