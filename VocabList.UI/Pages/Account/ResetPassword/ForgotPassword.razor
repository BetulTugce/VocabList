@page "/forgot-password"

<PageTitle>VocabList | Parolamı Unuttum</PageTitle>

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using VocabList.UI.Data.Users
@using VocabList.UI.Services
@using VocabList.UI.Utilities
@inject AuthApiService _authApiService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService

@if (@isVisibleAlert)
{
    <MudAlert Severity=severity Variant="Variant.Filled">
        @resultMessage
    </MudAlert>
}else
{
    <MudGrid Class="d-flex align-center justify-center">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <h2 class="mb-4">Parolamı Unuttum</h2>
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Email" Required="true" @bind-Value="requestModel.Email" RequiredError="Email zorunlu!" HelperText="@emailCustomMask.Mask"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "Email adresi geçersiz"})" />
                    <br />
                    <div class="d-flex align-center justify-space-between">
                        <div class="d-flex align-center"></div>
                        <div class="d-flex align-center">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.ResetAsync())" Class="ml-2">TEMİZLE</MudButton>
                            <div class="ml-2"></div>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="SendEmailAsync" Class="ml-auto">GÖNDER</MudButton>
                        </div>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}



@code {
    bool success;
    string[] errors = { };
    MudForm form;
    string resultMessage = string.Empty;
    Severity severity = new();
    public IMask emailMask = RegexMask.Email();
    public IMask emailCustomMask = RegexMask.Email("<kullanici>@<domain.com>");

    bool isVisibleAlert = false;

    ForgotPasswordRequest requestModel = new ForgotPasswordRequest();

    // [Inject]
    // HttpClient Client { get; set; }

    // [Inject]
    // AuthenticationStateProvider authenticationStateProvider { get; set; }

    async Task SendEmailAsync()
    {
        try
        {
            // ApiService üzerinden parola sıfırlama methodu çağırılıyor..
            // var response = await _authApiService.PasswordReset(Email);
            await _authApiService.PasswordReset(requestModel);

            // Dönen responseun true ya da false olma durumuna göre emailin iletim durumunun başarılı ya da başarısız olduğunu bildirmedim, kötü niyetli birisi hedefinin siteye üye olup olmadığını anlamaması için responsedan bağımsız şekilde email iletimi başarılıymış gibi bildirim dönüyor..
            severity = Severity.Info;
            resultMessage = $"Parolanızı sıfırlayabilmeniz için size bir e-posta gönderdik. Lütfen gelen kutunuzu ve gereksiz e-posta klasörünüzü kontrol edin.";
            isVisibleAlert = true;
            StateHasChanged();

        }
        catch (Exception ex)
        {
            severity = Severity.Error;
            resultMessage = $"Sunucu Hatası - Beklenmeyen bir hata meydana geldi!";
            ShowNotification(resultMessage, severity);
        }
    }

    private void ShowNotification(string resultMessage, Severity severity)
    {
        SnackbarService.Add(resultMessage, severity);
    }
}

